#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_GOOGLE_include_directive : enable

#include "Common.glsl"

#define RAY_TMIN 0.001
#define RAY_TMAX 100.0

layout(location = 0) rayPayloadEXT HitPayload payload;
layout(binding = 0, set = 0) uniform accelerationStructureEXT as;
layout(binding = 1, set = 0, rgba32f) uniform image2D img;

layout(binding = 6, set = 0) uniform Constants { ConstantsData constant; };


void main() {
  const vec2 pixel_center = vec2(gl_LaunchIDEXT.xy) + vec2(0.5); //将像素坐标从像素左下角移至像素中间
  const vec2 uv = pixel_center / vec2(gl_LaunchSizeEXT.xy); // 归一化像素坐标
  const vec2 d = uv * 2.0 - 1.0;  // 将坐标原点移动至屏幕中心

  const vec4 ray_origin = constant.view_inverse * vec4(0, 0, 0, 1); // 相机的世界坐标
  const vec4 ray_target = constant.projection_inverse * vec4(d.x, d.y, 1, 1); // 像素点的世界坐标
  const vec4 ray_direction = constant.view_inverse * vec4(normalize(ray_target.xyz), 0); // 光线方向
  // float aspect = float(gl_LaunchSizeEXT.x) / float(gl_LaunchSizeEXT.y);
  // const vec3 ray_origin = vec3(0, 0, -1.5);
  // const vec3 ray_direction = normalize(vec3(d.x * aspect, d.y, 1));

  payload.color = vec4(0);
  traceRayEXT(
    as, // acceleration structure
    gl_RayFlagsOpaqueEXT, // ray flags
    0xff, // cull mask
    0,  // sbt record offset
    0,  // sbt record stride
    0,  // miss index
    ray_origin.xyz,  // ray origin
    RAY_TMIN,   // ray min range
    ray_direction.xyz,  // ray direction
    RAY_TMAX, // ray max range
    0 // payload location
  );

  imageStore(img, ivec2(gl_LaunchIDEXT), vec4(payload.color.rgb, 1.0));
}